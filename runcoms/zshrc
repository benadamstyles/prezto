#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

fpath=(/usr/local/share/zsh/site-functions $fpath)

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

if [ -s "${ZDOTDIR:-$HOME}/.private" ]; then
  source "${ZDOTDIR:-$HOME}/.private"
fi

# Load the correct homebrew location into PATH
if [ "$(arch)" = "arm64" ]; then
  eval $(/opt/homebrew/bin/brew shellenv);
else
  eval $(/usr/local/bin/brew shellenv);
fi

# Load nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
which brew && [ -s "$(brew --prefix nvm)/nvm.sh" ] && . "$(brew --prefix nvm)/nvm.sh"

which brew && if [[ $(uname) == Linux ]]; then
  export PATH="$HOME/.linuxbrew/bin:$PATH"
  export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
  export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
fi

export PATH=/usr/local/opt/ruby/bin:$PATH
export GEM_HOME=$HOME/gems
export PATH=$HOME/gems/bin:$PATH

export LESS="MR"
export EDITOR="code -w"
export GIT_EDITOR="code -w"
export BAT_THEME="TwoDark"

# Only runs if jump is already installed
if (( $+commands[jump-bin] )) && [ -s $(jump-bin --zsh-integration) ]; then
  source $(jump-bin --zsh-integration)
fi

# Installed with `brew install z`
which brew && . $(brew --prefix)/etc/profile.d/z.sh

git config --global fetch.prune true
git config --global diff.colorMoved zebra

alias d.="git --git-dir=$HOME/dotfiles --work-tree=$HOME"
alias gup="gco master && gf --prune upstream master && git merge upstream/master && gp && gco -"
alias gcmn="git commit -n -m"
alias lslt="ls -lt"
alias ifl="googler -j"
alias goog="googler"
alias micro-dev="~/Dev/Software/micro"
alias open-latest='open "`ls -t | head -n1`"'
alias download-latest='download "`ls -t | head -n1`"'
alias rsync='rsync -ahr --progress'
alias curnet='networksetup -listnetworkserviceorder | grep $(route get example.com | grep -o "en[[:digit:]]")'

alias y='yarn'
alias ya='yarn add'
alias yad='yarn add -D'
alias ym='yarn maid'
alias yw='yarn workspace'

# Personal machines only
alias backup-archive="~/Dev/Git/rsync-time-backup/tmbackup.sh backup /Volumes/ARCHIVE /Volumes/ARCHIVE-BACKUP /Volumes/ARCHIVE-BACKUP/backup.exclude && osascript -e 'display notification \"Successfully backed up ARCHIVE disk\" with title \"Backup complete!\"'"
alias sim='open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app/'

# File suffix aliases
alias -s md=msee

function c() {
  if [[ $@ ]]; then
    z $@ && code .
  else
    code .
  fi
}

function retry() {
  for i in {1..$1}; do
    $@[2,-1] && break || sleep 0.1
  done
}

function download() {
  rsync -ahr --progress "$@" ~/Downloads
}

precmd() {
  # sets the tab title to current dir
  echo -ne "\e]1;${PWD##*/}\a"
}

setopt AUTO_CD

setopt RM_STAR_WAIT

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#
# for BASH
if type complete &>/dev/null; then
  _npm_completion() {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"

    # if your npm command includes `install` or `i `
    if [[ ${words[@]} =~ 'install' ]] || [[ ${words[@]} =~ 'i ' ]]; then
      local cur=${COMP_WORDS[COMP_CWORD]}

      # supply autocomplete words from `~/.npm`, with $cur being value of current expansion like 'expre'
      COMPREPLY=($(compgen -W "$(ls ~/.npm)" -- $cur))
    else
      IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
        COMP_LINE="$COMP_LINE" \
        COMP_POINT="$COMP_POINT" \
        npm completion -- "${words[@]}" \
        2>/dev/null)) || return $?
    fi

    IFS="$si"
  }
  complete -o default -F _npm_completion npm
# for ZSH
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS

    # if your npm command includes `install`
    if [[ ${words} =~ 'install' ]] || [[ ${words} =~ 'i ' ]]; then
      compadd -- $(COMP_CWORD=$((CURRENT - 1)) \
        COMP_LINE=$BUFFER \
        COMP_POINT=0 \
        ls ~/.npm -- "${words[@]}" \
        2>/dev/null)

    else
      compadd -- $(COMP_CWORD=$((CURRENT - 1)) \
        COMP_LINE=$BUFFER \
        COMP_POINT=0 \
        npm completion -- "${words[@]}" \
        2>/dev/null)
    fi

    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then

  _npm_completion() {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
      COMP_LINE="$line" \
      COMP_POINT="$point" \
      npm completion -- "${words[@]}" \
      2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Spaceship prompt installed via npm
# Set Spaceship ZSH as a prompt
fpath=("$HOME/.zfunctions" $fpath)
autoload -U promptinit
promptinit
prompt spaceship

SPACESHIP_PROMPT_ORDER=(
  #   time          # Time stampts section
  user # Username section
  dir  # Current directory section
  host # Hostname section
  git  # Git section (git_branch + git_status)
  #   hg            # Mercurial section (hg_branch  + hg_status)
  package # Package version
  node    # Node.js section
  ruby    # Ruby section
  #   elixir        # Elixir section
  #   xcode         # Xcode section
  #   swift         # Swift section
  #   golang        # Go section
  php # PHP section
  #   rust          # Rust section
  #   haskell       # Haskell Stack section
  #   julia         # Julia section
  #   docker        # Docker section
  #   aws           # Amazon Web Services section
  #   venv          # virtualenv section
  #   conda         # conda virtualenv section
  #   pyenv         # Pyenv section
  #   dotnet        # .NET section
  #   ember         # Ember.js section
  #   kubecontext   # Kubectl context section
  exec_time # Execution time
  line_sep  # Line break
  battery   # Battery level and status
  vi_mode   # Vi-mode indicator
  jobs      # Backgound jobs indicator
  #   exit_code     # Exit code section
  char # Prompt character
)

SPACESHIP_RPROMPT_ORDER=(
  time
)

SPACESHIP_TIME_SHOW=true
SPACESHIP_BATTERY_THRESHOLD=40
SPACESHIP_CHAR_SUFFIX=" "

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# opam configuration
test -r "$HOME/.opam/opam-init/init.zsh" && . "$HOME/.opam/opam-init/init.zsh" >/dev/null 2>/dev/null || true

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
